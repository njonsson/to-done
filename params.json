{"name":"To ☞ Done!","body":"# Introduction\r\n\r\n**To ☞ Done!** is a web application for managing projects and tasks. The\r\nconcept of estimation and progress tracking is loosely based on a method\r\ndescribed by Joel Spolsky in his Joel on Software weblog. I’ve used Spolsky’s\r\napproach of tracking time via “original estimate,” “current estimate” and\r\n\"remaining\" for every task. The modest departure I’ve made is to track the\r\nestimate and the remaining over time. This permits me to show work burndown and\r\nburnup in an Agile fashion.\r\n\r\nNote that this is a single-user application — no login is required.\r\nAuthentication and task ownership are not yet in scope.\r\n\r\n# Features\r\n\r\nTasks are grouped in projects — both are first-class entities in the\r\napplication. Estimates and work remaining are recorded at a task level, but\r\nthese numbers are also rolled up from tasks to the project they belong to.\r\n\r\nYou can estimate a task and record time remaining on it, changing these values\r\nwhenever you wish. A historical record of these changes is kept automatically on\r\na daily basis (only the last of multiple changes per day is kept).\r\n\r\nA task is considered “finished” when its latest work-remaining value is zero.\r\nYou can always bump the work remaining on a task above zero to mark it again as\r\n“unfinished.”\r\n\r\nThe order of unfinished tasks in a project can be changed at will. Finished\r\ntasks retain the order they were given while they were still unfinished.\r\n\r\nTasks are also categorized as either “original” (i.e., the work was known at the\r\nstart of the project), or not “original” (i.e., the work was added at some point\r\nafter the start of the project). This mechanism helps reveal scope creep in a\r\nproject, because only the estimates on original tasks are reflected in the\r\n“original estimate” of a project.\r\n\r\nProjects can be placed on a back burner, so to speak, by “closing” them. Closing\r\nand reopening projects is easy and leaves no audit trail.\r\n\r\nThe dashboard is a way of seeing the top task for every open project, all on one\r\npage. This supports a work style in which only one task in a project is being\r\nactively worked on at any time. When a different task is moved to the top of its\r\nproject, it will be the one that shows up on the dashboard.\r\n\r\nYou can search globally across projects and tasks — both their names and the\r\nlonger notes on them.\r\n\r\n# Getting it running\r\n\r\nTo ☞ Done! runs on Rails v2.1.1. Rails is installed in the vendor directory, so\r\nyou will have no need of installing the Rails RubyGem on your computer.\r\n\r\nRails of course needs Ruby. This project was developed under Ruby v1.8.6. You\r\nmay have some success running it under other versions of Ruby, but I haven’t\r\ntried.\r\n\r\nThe database is SQLite3. You will need to install that database engine, in\r\naddition to the Ruby bindings. Download and install SQLite3 from its web site\r\n(http://www.sqlite.org/download.html). Then install the Ruby bindings by typing\r\nthe following at a command line:\r\n\r\n    gem install sqlite3-ruby\r\n\r\nThis command presupposes that the RubyGems package manager is present on your\r\ncomputer.\r\n\r\nWith the prerequisites in place you can proceed to start the server. From the\r\nroot of the project, type:\r\n\r\n    ruby script/server\r\n\r\nThen point your browser at http://localhost:3000. If all is well you should see\r\nthe To ☞ Done! dashboard.","tagline":"An application for managing projects and tasks","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}